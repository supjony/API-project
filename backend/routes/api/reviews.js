const express = require('express');
const bcrypt = require('bcryptjs');

const { setTokenCookie, requireAuth } = require('../../utils/auth');
const { Spot, Review, SpotImage, sequelize, User, ReviewImage } = require('../../db/models');

const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');
// const review = require('../../db/models/review');
// const user = require('../../db/models/user');

const router = express.Router();




router.get('/current', requireAuth, async(req, res) => {

    const {user} = req;

    const reviews = await Review.findAll({
        where: {
            userId: user.id
        },
        include: [
            {model: User, attributes:  ['id', 'firstName', 'lastName']},
            {model: Spot,
                attributes: ['id', 'ownerId', 'address', 'city', 'state', 'country', 'lat', 'lng', 'name', 'price']
            },
            {model: ReviewImage, attributes: ['id', 'url']},
        ]
    })

    let Reviews = [];
    for (let review of reviews) {
        let spot =  await review.getSpot()
        let spotImages = await spot.getSpotImages()
        for (let spotImage of spotImages) {
            if (spotImage.preview === true) {
                review.Spot.dataValues.previewImage = spotImage.url
            }
        }
        if (!review.Spot.dataValues.previewImage) {
            delete review.Spot.dataValues.previewImage
        }
        Reviews.push(review.toJSON())
    }

res.json({Reviews})


})


router.get('/:spotId/reviews', async(req, res) => {
    const {user} = req;

    const reviews = await Spot.findByPk(req.params.spotId, {
        where: {
            spotId: spot.id
        },
        include: [
            {model: Review, attributes:  ['id', 'userId', 'spotId', 'review', 'stars', 'createdAt', "updatedAt"]},
            {model: User,
                attributes: ['id', 'firstName', 'lastName']
            },
            {model: ReviewImage, attributes: ['id', 'url']},
        ]
    })

    const reviewImages = await Review.findAll({
        where: {
            reviewId: review.id
        },
        include: [
            {model: ReviewImage, attributes: ['id', 'url']}
        ]
    })

    const Reviews = {
        reviews,
        reviewImages
    }
    res.json(Reviews)
})






router.post('/:reviewId/images', requireAuth, async (req, res) => {

    let currentUser = req.user.id;
    let {url} = req.body;

    let review = await Review.findByPk(req.params.reviewId);

    if (!review) {
        return res.status(404).json({
            "message": "Review couldn't be found"
          })
    }


    if (currentUser !== review.userId) {
        return res.status(403).json({
            message: 'Forbidden'
        })
    }


    let imageCount = await ReviewImage.findAll({
        where: {
            reviewId: review.id
        }
    })

    if (imageCount.length >= 10) {
        return res.status(403).json({
            message: "Maximum number of images for this resource was reached"
        })
    }

    let newImage = await review.createReviewImage({
        url
    })

    res.status(200).json({
        id: newImage.id,
        url: newImage.url
    })

})

const validateCreateReviewForASpot = [
    check('review')
      .exists({ checkFalsy: true })
      .withMessage('Review text is required.'),
    check('stars')
      .exists({ checkFalsy: true })
      .isNumeric()
      .withMessage('Stars must be an integer from 1 to 5.'),
    handleValidationErrors
  ];


router.put('/:reviewId', requireAuth, validateCreateReviewForASpot, async (req, res) => {
    let currentUser = req.user.id;
    let {review, stars} = req.body
    let foundReview = await Review.findByPk(req.params.reviewId);

    if (!foundReview) {
        return res.status(404).json({
            "message": "Review couldn't be found"
          })
    }

    if (review === ''){
        return res.status(400).json({
            "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
            "errors": {
              "review": "Review text is required"
            }
          })
    }

    if (isNaN(stars) || stars < 1 || stars > 5){
        return res.status(400).json({
            "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
            "errors": {
                "stars": "Stars must be an integer from 1 to 5"
            }
          })
    }

    if (currentUser !== foundReview.userId) {
        return res.status(403).json({
            message: 'Forbidden'
        })
    }

    let updatedReview = await foundReview.update({
        review,
        stars
    })

    res.status(200).json(updatedReview)

})


router.delete('/:reviewId', requireAuth, async (req, res) => {
    let review = await Review.findByPk(req.params.reviewId);
    let currentUser = req.user.id;

    if (!review) {
        return res.status(404).json({
            "message": "Review couldn't be found"
          })
    }

    if (currentUser !== review.userId) {
        return res.status(403).json({
            message: 'Forbidden'
        })
    }

    await review.destroy();

    res.status(200).json({
        "message": "Successfully deleted",
      })
})









module.exports = router;
